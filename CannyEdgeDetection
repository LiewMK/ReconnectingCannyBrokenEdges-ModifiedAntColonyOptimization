import math
import numpy as np


class CannyEdgeDetection:
    @staticmethod
    def convolution(input_image, kernel):
        m, n = input_image.shape
        output_image = np.zeros((m, n))
        for i in range(m):
            for j in range(n):
                if [i, j] == [0, 0]:
                    output_image[i, j] = input_image[i, j] * kernel[1, 1] + input_image[i, j+1] * kernel[1, 2] \
                                         + input_image[i+1, j] * kernel[2, 1] + input_image[i+1, j+1] * kernel[2, 2]
                elif [i, j] == [0, n-1]:
                    output_image[i, j] = input_image[i, j-1] * kernel[1, 0] + input_image[i, j] * kernel[1, 1] \
                                         + input_image[i+1, j-1] * kernel[2, 0] + input_image[i+1, j] * kernel[2, 1]
                elif [i, j] == [m-1, 0]:
                    output_image[i, j] = input_image[i-1, j] * kernel[0, 1] + input_image[i-1, j+1] * kernel[0, 2] \
                                         + input_image[i, j] * kernel[1, 1] + input_image[i, j+1] * kernel[1, 2]
                elif [i, j] == [m-1, n-1]:
                    output_image[i, j] = input_image[i-1, j-1] * kernel[0, 0] + input_image[i-1, j] * kernel[0, 1] \
                                         + input_image[i, j-1] * kernel[1, 0] + input_image[i, j] * kernel[1, 1]
                elif i == 0 and 0 < j < n-1:
                    output_image[i, j] = input_image[i, j-1] * kernel[1, 0] + input_image[i, j] * kernel[1, 1] \
                                         + input_image[i, j+1] * kernel[1, 2] + input_image[i+1, j-1] * kernel[2, 0] \
                                         + input_image[i+1, j] * kernel[2, 1] + input_image[i+1, j+1] * kernel[2, 2]
                elif 0 < i < m-1 and j == n-1:
                    output_image[i, j] = input_image[i-1, j-1] * kernel[0, 0] + input_image[i-1, j] * kernel[0, 1] \
                                         + input_image[i, j-1] * kernel[1, 0] + input_image[i, j] * kernel[1, 1] \
                                         + input_image[i+1, j-1] * kernel[2, 0] + input_image[i+1, j] * kernel[2, 1]
                elif i == m-1 and 0 < j < n-1:
                    output_image[i, j] = input_image[i-1, j-1] * kernel[0, 0] + input_image[i-1, j] * kernel[0, 1] \
                                         + input_image[i-1, j+1] * kernel[0, 2] + input_image[i, j-1] * kernel[1, 0] \
                                         + input_image[i, j] * kernel[1, 1] + input_image[i, j+1] * kernel[1, 2]
                elif 0 < i < m - 1 and j == 0:
                    output_image[i, j] = input_image[i-1, j] * kernel[0, 1] + input_image[i-1, j+1] * kernel[0, 2] \
                                         + input_image[i, j] * kernel[1, 1] + input_image[i, j+1] * kernel[1, 2] \
                                         + input_image[i+1, j] * kernel[2, 1] + input_image[i+1, j+1] * kernel[2, 2]
                else:
                    output_image[i, j] = input_image[i, j] * kernel[1, 1] + input_image[i-1, j-1] * kernel[0, 0] \
                                         + input_image[i-1, j] * kernel[0, 1] + input_image[i-1, j+1] * kernel[0, 2] \
                                         + input_image[i, j-1] * kernel[1, 0] + input_image[i, j+1] * kernel[1, 2] \
                                         + input_image[i+1, j-1] * kernel[2, 0] + input_image[i+1, j] * kernel[2, 1] \
                                         + input_image[i+1, j+1] * kernel[2, 2]
        return output_image

    def gaussian_filter(self, input_image, sigma):
        x = np.array([[-1, 0, 1], [-1, 0, 1], [-1, 0, 1]])
        y = np.array([[-1, -1, -1], [0, 0, 0], [1, 1, 1]])
        gaussian_kernel = (1 / (2.0 * np.pi * sigma ** 2)) * (np.exp(-((x ** 2 + y ** 2) / (2.0 * sigma ** 2))))
        output_image = self.convolution(input_image, gaussian_kernel)
        output_image = output_image / np.max(output_image) * 255
        return output_image

    def sobel_filter(self, input_image):
        kernel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
        kernel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])
        gradient_x = self.convolution(input_image, kernel_x)
        gradient_y = self.convolution(input_image, kernel_y)
        gradient_magnitude = np.sqrt(np.square(gradient_x) + np.square(gradient_y))
        direction = np.arctan2(gradient_y, gradient_x)
        return gradient_magnitude, direction

    @staticmethod
    def non_maximum_suppression(input_image, direction):
        m, n = input_image.shape
        output_image = input_image.copy()
        angle = direction * 180 / np.pi
        angle[angle < 0] += 180
        for i in range(1, m-1):
            for j in range(1, n-1):
                positive, negative = 0, 0
                if 0 <= angle[i, j] < 22.5 or 157.5 <= angle[i, j] <= 180:
                    positive = output_image[i, j + 1]
                    negative = output_image[i, j - 1]
                elif 22.5 <= angle[i, j] < 67.5:
                    positive = output_image[i + 1, j - 1]
                    negative = output_image[i - 1, j + 1]
                elif 67.5 <= angle[i, j] < 112.5:
                    positive = output_image[i + 1, j]
                    negative = output_image[i - 1, j]
                elif 112.5 <= angle[i, j] < 157.5:
                    positive = output_image[i - 1, j - 1]
                    negative = output_image[i + 1, j + 1]
                if output_image[i, j] >= positive and output_image[i, j] >= negative:
                    pass
                else:
                    output_image[i, j] = 0
        return output_image

    @staticmethod
    def double_threshold(input_image, t1, t2):
        m, n = input_image.shape
        output_image = np.zeros((m, n), np.uint8)
        for i in range(m):
            for j in range(n):
                if input_image[i, j] >= t2:
                    output_image[i, j] = 255
                elif t1 <= input_image[i, j] < t2:
                    output_image[i, j] = 125
                else:
                    output_image[i, j] = 0
        return output_image

    @staticmethod
    def hysteresis(input_image):
        m, n = input_image.shape
        output_image = input_image.copy()
        for i in range(1, m-1):
            for j in range(1, n-1):
                if input_image[i, j] == 125:
                    if input_image[i+1, j-1] == 255 or input_image[i+1, j] == 255 \
                            or input_image[i+1, j+1] == 255 or input_image[i, j-1] == 25 \
                            or input_image[i, j+1] == 255 or input_image[i-1, j-1] == 255 \
                            or input_image[i-1, j] == 255 or input_image[i-1, j+1] == 255:
                        output_image[i, j] = 255
                    else:
                        output_image[i, j] = 0
        return output_image
